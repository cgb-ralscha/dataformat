// automatically generated by the FlatBuffers compiler, do not modify

package ch.rasc.dataformat.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Addresses extends Table {
  public static Addresses getRootAsAddresses(ByteBuffer _bb) { return getRootAsAddresses(_bb, new Addresses()); }
  public static Addresses getRootAsAddresses(ByteBuffer _bb, Addresses obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Addresses __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Address address(int j) { return address(new Address(), j); }
  public Address address(Address obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int addressLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createAddresses(FlatBufferBuilder builder,
      int addressOffset) {
    builder.startObject(1);
    Addresses.addAddress(builder, addressOffset);
    return Addresses.endAddresses(builder);
  }

  public static void startAddresses(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addAddress(FlatBufferBuilder builder, int addressOffset) { builder.addOffset(0, addressOffset, 0); }
  public static int createAddressVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAddressVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAddresses(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishAddressesBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

